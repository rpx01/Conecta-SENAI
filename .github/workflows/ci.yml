name: Monorepo CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      common: ${{ steps.filter.outputs.common }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters:
            api:
              - 'apps/api/**'
              - 'infra/**'
              - 'pyproject.toml'
            common:
              - 'packages/common/**'

  common:
    needs: changes
    if: needs.changes.outputs.common == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install common package
        run: |
          cd packages/common
          python -m pip install --upgrade pip
          pip install -e .
      - name: Validate package import
        run: |
          python -c "import conectasenai_common; print(conectasenai_common.__all__)"

  api:
    needs: changes
    if: needs.changes.outputs.api == 'true' || needs.changes.outputs.common == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Poetry
        run: pip install "poetry==1.8.3"
      - name: Install dependencies
        run: |
          cd apps/api
          poetry install --with dev
      - name: Lint with flake8
        run: |
          cd apps/api
          poetry run flake8 conectasenai_api --max-line-length=120
      - name: Security scan with bandit
        run: |
          cd apps/api
          poetry run bandit -r conectasenai_api -ll
      - name: Audit dependencies with pip-audit
        run: |
          cd apps/api
          poetry run pip-audit -f json --progress-spinner off > audit.json
          python - <<'PY'
import json, sys
from pathlib import Path

data = json.loads(Path('audit.json').read_text(encoding='utf-8'))


def is_high(v):
    for s in v.get('severity', []):
        score = s.get('score')
        if score is not None:
            try:
                if float(score) >= 7:
                    return True
            except (ValueError, TypeError):
                pass
        level = s.get('severity')
        if isinstance(level, str) and level.upper() in {'HIGH', 'CRITICAL'}:
            return True
    return False


if any(is_high(v) for d in data.get('dependencies', []) for v in d.get('vulns', [])):
    print('High severity vulnerabilities found', file=sys.stderr)
    sys.exit(1)
PY
      - name: Run tests
        run: |
          cd apps/api
          poetry run pytest
