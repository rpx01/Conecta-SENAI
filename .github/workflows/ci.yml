name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  poetry-lock-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Poetry lock check
        run: |
          pip install "poetry==1.8.3"
          poetry check --lock

  build:
    runs-on: ubuntu-latest
    needs: poetry-lock-check
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .
        pip install pytest flake8 bandit pip-audit

    - name: Lint with flake8
      run: flake8 --max-line-length=120 --exit-zero

    - name: Security scan with bandit
      run: bandit -r src -ll

    - name: Audit dependencies with pip-audit
      run: |
        pip-audit -f json --progress-spinner off > audit.json
        python - <<'PY'
import json, sys
data = json.load(open('audit.json'))
def is_high(v):
    for s in v.get('severity', []):
        score = s.get('score')
        if score is not None:
            try:
                if float(score) >= 7:
                    return True
            except (ValueError, TypeError):
                pass
        level = s.get('severity')
        if isinstance(level, str) and level.upper() in {'HIGH', 'CRITICAL'}:
            return True
    return False
if any(is_high(v) for d in data.get('dependencies', []) for v in d.get('vulns', [])):
    print('High severity vulnerabilities found', file=sys.stderr)
    sys.exit(1)
PY

    - name: Run tests
      run: pytest

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  trivy:
    runs-on: ubuntu-latest
    needs: poetry-lock-check
    steps:
      - uses: actions/checkout@v4
      - name: Scan Dockerfile with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'Dockerfile'
          exit-code: '1'
